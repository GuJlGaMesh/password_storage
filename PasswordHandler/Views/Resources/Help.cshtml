@model Password_Storage.RuleContainer
@{
    ViewData["Title"] = "Help";
}

<h1>Help</h1>
<div>
    <a asp-action="Index">Back to List</a>
</div>

<h2>Generation</h2>
<p>
    @Model.GetNames();
    <h3>Rules:</h3>
    <ul>
        @foreach (var m in Model.GetAll())
         {
            <li>
                <h4>@m.Name</h4><p>- @m.Description</p>
            </li>
         }
   

    <h3>Let`s talk about "features" of generation.</h3>
    <ul>
        <li>
            Rule that set length of the password inherit from lower char rule and when you are use generation then probably in the
            all cases you will get password with lower chars. Just accept it.
        </li>
        <li>Ignoring of activating generation has activated activate page with choosing of generation rules.</li>
        <li>Generation and check using the same password length, if it specified. In other case it use delault length that equal 16. </li>
    </ul>
    <h2>Estimation password quality</h2>
    <p>
        It has rules with same names as rules above, but they works in the other way. They check occurence of the symbols in the password.
        Which types of the symbols it checks you can understand from it`s name. List of it`s names below:
    </p>
    <ul>
        @foreach (var m in Model.GetAll())
        {
            <li>
                <h4>@m.Name</h4>
            </li>
        }
    </ul>
    <p>
        <h3>Few words about estimate</h3> <strong>- if you get estimate something like "1" then you will be sure that password is good.</strong>
    </p>
    </p>

    <div>
        <a asp-action="Index">Back to List</a>
    </div>


